#include <windows.h>
#include <shlwapi.h>
#include <tchar.h>
#pragma comment(lib, "shlwapi.lib")

char *StrToUpper(char *s)
{
    char *p;  
 
    for (p = s; *p; p++) *p = toupper(*p);
	return s;
}

void fputc_(int ch, HANDLE fp)
{
	unsigned char buff[1];
	DWORD written;
	buff[0] = ch;
	if (!WriteFile(fp, buff, 1, &written, NULL)) throw TEXT("File error.");
	if (written != 1) throw TEXT("File error.");
}

void fread_(void *buff, int w, unsigned long len, HANDLE fp)
{
	DWORD read;
	if (!ReadFile(fp, buff, len*w, &read, NULL)) throw TEXT("File error.");
	if (read != len) throw TEXT("File error.");
}

void fwrite_(void *buff, int w, unsigned long len, HANDLE fp)
{
	DWORD write;
	if (!WriteFile(fp, buff, len*w, &write, NULL)) throw TEXT("File error.");
	if (write != len) throw TEXT("File error.");
}

void writeAAVal(unsigned char val, HANDLE fp)
{
	fputc_(0xaa | (val >> 1), fp);
	fputc_(0xaa | val, fp);
}

void conv(LPCTSTR name)
{
	static unsigned char decTable[] = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x02,0x03,0x00,0x04,0x05,0x06,
		0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x08,0x00,0x00,0x00,0x09,0x0a,0x0b,0x0c,0x0d,
		0x00,0x00,0x0e,0x0f,0x10,0x11,0x12,0x13,0x00,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,0x00,0x1c,0x1d,0x1e,
		0x00,0x00,0x00,0x1f,0x00,0x00,0x20,0x21,0x00,0x22,0x23,0x24,0x25,0x26,0x27,0x28,
		0x00,0x00,0x00,0x00,0x00,0x29,0x2a,0x2b,0x00,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,
		0x00,0x00,0x33,0x34,0x35,0x36,0x37,0x38,0x00,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f
	};

	static unsigned char scramble[] = {
		0,7,14,6,13,5,12,4,11,3,10,2,9,1,8,15
	};
	static unsigned char FlipBit[4] = { 0,  2,  1,  3  };

	unsigned char src[512], dst[256+2];
	int volume = 0xfe;
	int track, sector;

	HANDLE fp, fpw;
	TCHAR path[MAX_PATH];

	if (!name || !name[0]) return;

	if (StrCmp(StrToUpper(PathFindExtension(name)), TEXT(".NIC")) != 0) {
		MessageBox(NULL, TEXT("Drop .nic file."), TEXT("nic2dsk"), MB_OK);
		return;
	}

	fp = CreateFile(name, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (fp == INVALID_HANDLE_VALUE) {
		MessageBox(NULL, TEXT("Can't create file."), TEXT("nic2dsk"), MB_OK);
		return;
	}

	lstrcpy(path, name);
	PathRemoveExtension(path);
	PathAddExtension(path,TEXT(".DSK"));

	fpw = CreateFile(path, GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);		
	if (fpw == INVALID_HANDLE_VALUE) {
		if (MessageBox(NULL, TEXT("Overwrite the DSK file?"), TEXT("nic2dsk"), MB_OKCANCEL)
			!= IDOK) {
			CloseHandle(fp);
			return;
		}
		fpw = CreateFile(path, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
		if (fpw == INVALID_HANDLE_VALUE) {
			CloseHandle(fp);
			return;
		}
	}

	try {
		for (track = 0; track < 35; track++) {
			for (sector = 0; sector < 16; sector++) {
				int i, j;
				unsigned char x, ox = 0;

				if (SetFilePointer(fpw, track*(256*16)+scramble[sector]*256, NULL, FILE_BEGIN)
					== INVALID_SET_FILE_POINTER) throw TEXT("File error.");
				fread_(src, 1, 512, fp);
				for (j=0, i=0x38; i<0x8e; i++, j++) {
					x = ((ox^decTable[src[i]])&0x3f);
					dst[j+172] = FlipBit[(x>>4)&3];
					dst[j+86] = FlipBit[(x>>2)&3];
					dst[j] = FlipBit[(x)&3];
					ox = x;
				}
				for (j=0, i=0x8e; i<0x18e; i++, j++) {
					x = ((ox^decTable[src[i]])&0x3f);
					dst[j]|=(x<<2);
					ox = x;
					}
				fwrite_(dst, 1, 256, fpw);
			}	
		}
	}
	catch (LPTSTR msg) {
		MessageBox(NULL, msg, TEXT("nic2dsk"), MB_OK);
		CloseHandle(fpw);
		CloseHandle(fp);
		return;
	}
	// MessageBox(NULL, TEXT("the DSK file created."), TEXT("nic2dsk"), MB_OK);
	CloseHandle(fpw);
	CloseHandle(fp);
}

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
                     LPSTR lpCmdLine, int nCmdShow)
{
	if (__argc>1) {
		int i;
		for (i=1; i<__argc; i++) conv(__targv[i]);
	}
	return 0;
}